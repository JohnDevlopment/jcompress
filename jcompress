#!/bin/bash

shopt -s expand_aliases

# usage: die <message> [<code>]
die() {
    local msg="$1"
    local code=${2:-1}

    echo "$BASENAME: $msg" >&2
    exit $code
}

# usage: subflag <variable> <flag> [argument]
subflag() {
    local flag=${2:?missing flag}
    declare -n Var=${1:?missing varname}

    if bool $Var; then
	echo $flag $3
    else
	echo
    fi
    true
}

# usage: bool <value>
bool() {
    local val=${1:?no value}
    expr $val + 1 >/dev/null || die "invalid boolean value: $val"
    test $val -ne 0 && return `true`
    false
}

_getpassword() {
    local pswd copy

    echo -e "\nEnter the new password" >&2
    pswd=$(systemd-ask-password)

    if [ -z "$pswd" ]; then
	echo "empty password" >&2
	return 1
    fi

    echo -e "\nConfirm password" >&2
    copy=$(systemd-ask-password)
    echo >&2

    if [ "$pswd" != "$copy" ]; then
	echo "failed to confirm password" >&2
	return 1
    fi

    echo "$pswd"
    true
}

declare -r BASENAME=${0##*/}
declare -r VERSION="$BASENAME [VERSION]"

declare -r USAGE=$(cat <<EOF
usage: $BASENAME [OPTIONS] [-m|--mode MODE] [--] ARCHIVE FILE|DIR...
       $BASENAME -h|--help

Valid Modes:
       zip
       7z
       tgz
       tbz2
       t7z

Valid Extensions:
       zip (.zip)
       7z (.7z)
       tgz (.tgz, .tar.gz)
       tbz2 (.tbz2, .tar.bz2)
       t7z (.t7z, .tar.7z)

Options:
       -h
       --help Display this help message and exit.

       -V
       --version
              Print the program version and exit.

       -m mode
       --mode Specifiy the mode (or format) of the archive. If
              omitted, the archive's extension is used.

       --use-pigz
              For the tgz format, this specifies pigz as the
              compression program to use.

       --use-pbzip2
              For the tbz2 format, this specifies pbzip2 as the
	      compression program to use.

       --password
              Encrypt the archive with a password. What happens
              exactly will depend on the format.

       -v
       --verbose
	      Print the output of the command.

       -r
       --recursive
              Travel subdirectories recursively.

       -M
       --move Move the files into the archive. Actually, the files are
       	      simply deleted after copying them.

       --dry-run
              Do not take any action; rather, print out the commandline
	      resulting from the command.

Environment Variables:
       JC_GPGPUBKEY
              For formats that use gpg to encrypt the file, this
              holds the public key to use.
              Current value: $JC_GPGPUBKEY
EOF
	)

alias usage='echo; echo "$USAGE" | head -n 2 >&2'

# Option defaults
password=0
dryrun=1
verbose=1
movefiles=0

# Get option list
if ! temp=$(getopt -n $BASENAME -o 'hrVMm:v' -l 'mode:,move,help,use-pigz,use-pbzip2,recursive,password,dry-run,version,verbose' -- "$@"); then
    usage
    exit 1
fi
eval set -- "$temp"

while true; do
    case "$1" in
	-m|--mode)
	    mode="$2"
	    modeerror="invalid mode: $mode"
	    shift 2
	    ;;
	-h|--help)
	    echo "$USAGE"
	    exit
	    ;;
	-V|--version)
	    echo $VERSION
	    exit
	    ;;
	--use-pigz)
	    COMPRESSOR='--use-compress-program=pigz'
	    shift
	    ;;
	--use-pbzip2)
	    COMPRESSOR2='--use-compress-program=pbzip2'
	    shift
	    ;;
	-r|--recursive)
	    recursive='-r'
	    shift
	    ;;
	--password)
	    password=1
	    shift
	    ;;
	--dry-run)
	    dryrun=1
	    shift
	    ;;
	-M|--move)
	    movefiles=1
	    shift
	    ;;
	-v|--verbose)
	    verbose=1
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    echo "$BASENAME: internal error" >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Posititional parameters
case $# in
    0)
	echo -e "missing filename" >&2
	usage
	exit 1
	;;
    1)
	echo -e "no files to insert" >&2
	usage
	exit 1
	;;
    *)

esac

archive="$1"
shift

# If MODE is not specified, use the archive name
if [ -z "$mode" ]; then
    mode="${archive#*.}"
    modeerror="invalid or missing extension: $mode"
elif [ -z "${archive#*.}" ]; then
    temp="${archive%%.*}"
    archive="$temp.$mode"
fi

# Password mode for certain compressed tar archives
if [[ $mode =~ t(ar\.)?[gb]z$ ]]; then
    if bool $password; then
	if [ -z "$JC_GPGPUBKEY" ]; then
	    echo "$BASENAME: no public key defined in \$JC_GPGPUBKEY" >&2
	    exit 1
	fi
	gpgcommand=(gpg --encrypt --recipient $JC_GPGPUBKEY "$archive" "&&" rm -v "$archive")
    fi
fi

# Detects if --use-pigz was passed with a format that isn't tgz
if [[ ! $mode =~ t(ar\.)?gz$ && -v COMPRESSOR ]]; then
    echo "$BASENAME: --use-pigz is not supported by $mode files" >&2
fi

# Detects if --use-pbzip2 was passed with a format that isn't tgz
if [[ ! $mode =~ t(ar\.)?bz2$ && -v COMPRESSOR2 ]]; then
    echo "$BASENAME: --use-pbzip2 is not supported by $mode files" >&2
fi

# Which mode?
case "$mode" in
    zip)
	temp=$password
	password=
	if bool $temp; then
	    password=--encrypt
	fi

	movefiles=$(subflag movefiles --move)

	cmdline=(zip -T $movefiles $password $recursive "$archive" "$@")
	;;
    7z)
	cmdprefix=7zr

	# passwords are given on the commandline with 7z
	temp=$password
	password=
	if bool $temp; then
	    cmdprefix=7za
	    password="-p"$(_getpassword)
	    [ $? -eq 0 ] || exit 1
	fi

	# TODO: does $movefiles have a default value?
	movefiles=$(subflag movefiles -sdel)

	cmdline=($cmdprefix a $movefiles $password "$archive" "$@")
	;;
    tgz|tar.gz)
	movefiles=$(subflag movefiles --remove-files)


	if [ -n "$COMPRESSOR" ]; then
	    cmdline=(tar -c $movefiles $COMPRESSOR -f "$archive" "$@")
	else
	    cmdline=(tar -cz $movefiles -f "$archive" "$@")
	fi
	;;
    tbz2|tar.bz2)
	movefiles=$(subflag movefiles --remove-files)

	if [ -n "$COMPRESSOR2" ]; then
	    cmdline=(tar -c $movefiles $COMPRESSOR2 -f "$archive" "$@")
	else
	    cmdline=(tar -cj $movefiles -f "$archive" "$@")
	fi
	;;
    t7z|tar.7z)
	if bool $movefiles; then
	    special7z_deletesources=1
	    unset movefiles
	fi
	cmdline=(tar -cf - "$@" "|" 7za a -si "$archive")
	;;
    *)
	echo -e "$modeerror\n\n$USAGE" >&2
	exit 1
esac

if bool $dryrun; then
    echo "${cmdline[@]}"
    if [ -v gpgcommand ]; then
	echo "${gpgcommand[@]}"
    fi
else
    eval "${cmdline[@]}" || exit 1
    if [ -v gpgcommand ]; then
	eval "${gpgcommand[@]}"
    fi
    # Special: tar.7z archives
    # Delete source file(s) after successful creation of archive
    if bool ${special7z_deletesources:-0}; then
	echo
	rm -rfv "$@"
    fi
fi

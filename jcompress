#!/bin/bash

shopt -s expand_aliases

## usage: get_extension FILE
function get_extension {
    local file="${1:?missing FILE}"

    # Look for tar.*/t* extensions
    if [[ $1 =~ \.(t(ar\.)?([g7]z|bz2))$ ]]; then
	echo "${BASH_REMATCH[1]}"
	return
    elif [[ $1 =~ \.(zip|7z) ]]; then
	echo "${BASH_REMATCH[1]}"
	return
    fi

    echo -n
    false
}

## usage: die MESSAGE [CODE]
function die {
    local msg="$1"
    local code=${2:-1}

    echo "$BASENAME: $msg" >&2
    exit "$code"
}

## usage: subflag VARIABLE FLAG [ARGUMENT]
function subflag {
    local flag=${2:?missing flag}
    declare -n Var=${1:?missing varname}

    if bool "$Var"; then
	echo "$flag" "$3"
    else
	echo
    fi
    true
}

## usage: bool VALUE
function bool {
    local val=${1:?no value}
    expr $val + 1 >/dev/null || die "invalid boolean value: $val" 2
    test $val -ne 0 && return $(true)
    false
}

## usage: quote STRING
function quote {
    local str="$1"
    local arr=($str)
    local i=${#arr[@]}
    if [ $i -ne 1 ]; then
	echo "\"$str\""
    else
	echo "$str"
    fi
}

## usage: concat [<arg>] ...
function concat {
    local string=""
    local e
    local sep=""
    for e in "$@"; do
	if [ -n "$e" ]; then
	    string="$string$sep"$(quote "$e")
	    sep=' '
	fi
    done
    echo "$string"
}

function _getpassword {
    local pswd copy

    echo -e "\nEnter the new password" >&2
    pswd=$(systemd-ask-password)

    if [ -z "$pswd" ]; then
	echo "empty password" >&2
	return 1
    fi

    echo -e "\nConfirm password" >&2
    copy=$(systemd-ask-password)
    echo >&2

    if [ "$pswd" != "$copy" ]; then
	echo "failed to confirm password" >&2
	return 1
    fi

    echo "$pswd"
    true
}

declare -r BASENAME=${0##*/}
declare -r VERSION="$BASENAME [VERSION]"

declare -r USAGE=$(cat <<EOF
usage: $BASENAME [-hMrVv] [--longoption ...] [-f FORMAT] [--] archive [file|dir ...]

Valid Formats:
       zip
       7z
       tgz
       tbz2
       t7z

Valid Extensions:
       zip (.zip)
       7z (.7z)
       tgz (.tgz, .tar.gz)
       tbz2 (.tbz2, .tar.bz2)
       t7z (.t7z, .tar.7z)

Options:
       -h
       --help Display this help message and exit.

       -V
       --version
              Print the program version and exit.

       -f format
       --format
              Specifiy the format of the archive. If
              omitted, the archive's extension is used.

       --use-pigz
              For the tgz format, this specifies pigz as the
              compression program to use.

       --use-pbzip2
              For the tbz2 format, this specifies pbzip2 as the
	      compression program to use.

       --password
              Encrypt the archive with a password. What happens
              exactly will depend on the format.

       -v
       --verbose
	      Print the output of the command.

       -r
       --recursive
              Travel subdirectories recursively.

       -M
       --move Move the files into the archive. Actually, the files are
       	      simply deleted after copying them.

       --dry-run
              Do not take any action; rather, print out the commandline
	      resulting from the command.

Environment Variables:
       JC_GPGPUBKEY
              For formats that use gpg to encrypt the file, this
              holds the public key to use.
              Current value: $JC_GPGPUBKEY
EOF
	)

alias usage='echo; echo "$USAGE" | head -n 2 >&2'

# Option defaults
password=0
dryrun=0
verbose=0
movefiles=0
format=
pigzcompressor=
pbzip2compressor=

# Get option list
longopts=(
    # Options that make the program quit
    help
    version

    # Output options
    format:
    password
    dry-run
    verbose

    # Input options
    move
    recursive

    # Compression options
    use-pigz
    use-pbzip2
)
longopts=$(printf "%s," "${longopts[@]}" | sed 's/,$//')

### DEBUG: Special debug commands for use with unit tests (remove on release build)
case "$1" in
    debug-get-long-options|dglo)
	echo -n "$longopts" | sed -E 's/(.*),$/\1/'
	exit
	;;
    debug-check-archive|dca)
	fmt=$2
	if [ -z "$fmt" ]; then
	    die "required argument: format"
	fi

	output=$($0 --format $fmt --dry-run archive test/{1,2,3}.txt)
	awkscript=$(cat <<"EOF"
{
      for (i = 1; i <= NF; i++) {
	  subs = "archive\\.[a-z]*"
	  x = match($i, subs)
	  if (x > 0)
	     print $i
      }
}
EOF
		 )

	cmd=(echo "$output")
	if [ "$3" = "--awk" ]; then
	    cmd+=("|" awk "'$awkscript'")
	fi

	trap "rm -f 'archive.$fmt'" EXIT

	"${cmd[@]}" || die "failed to evaluate command: \$ ${cmd[*]}" 2
	exit
	;;
    debug-get-extension|dbe)
	file="$2"
	if [ -z "$file" ]; then
	    die "missing file argument"
	fi

	get_extension "file" || die "failed to get extension from $file" 2
	exit
	;;
    *)
	:
esac
###

if ! temp=$(getopt -n "$BASENAME" -o 'hrVMm:v' -l "$longopts" -- "$@"); then
    usage
    exit 1
fi
eval set -- "$temp"

while true; do
    case "$1" in
	-f|--format)
	    format="$2"
	    formaterror="invalid format: $format"
	    shift 2
	    ;;
	-h|--help)
	    echo "$USAGE"
	    exit
	    ;;
	-V|--version)
	    echo "$VERSION"
	    exit
	    ;;
	--use-pigz)
	    pigzcompressor='--use-compress-program=pigz'
	    shift
	    ;;
	--use-pbzip2)
	    COMPRESSOR2='--use-compress-program=pbzip2'
	    shift
	    ;;
	-r|--recursive)
	    recursive='-r'
	    shift
	    ;;
	--password)
	    password=1
	    shift
	    ;;
	--dry-run)
	    dryrun=1
	    shift
	    ;;
	-M|--move)
	    movefiles=1
	    shift
	    ;;
	-v|--verbose)
	    verbose=1
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    die "internal error\n\n$(usage)" 2
	    ;;
    esac
done

# Posititional parameters
case $# in
    0)
	die "missing filename\n\n$(usage)"
	;;
    1)
	die "no files to insert\n$(usage)"
	;;
    *)

esac

archive="$1"
shift

# If FORMAT is not specified, use the archive name
ext=$(get_extension "$archive")

if [ -z "$format" ]; then
    format=$ext
    formaterror="invalid or missing extension: $ext"
elif [ -z "$ext" ]; then
    if test -z "$format"; then
	formaterror="missing --format option"
	format=missing
    else
	archive="$archive.$format"
	formaterror="invalid format: $format"
    fi
fi

# Shared options between compressed tar archives
if [[ $format =~ t(ar\.)?(gz|bz2)$ ]]; then
    verboseOpt=$(subflag verbose v)
    movefiles=$(subflag movefiles --remove-files)

    # Password mode for certain compressed tar archives
    if bool $password; then
	if [ -z "$JC_GPGPUBKEY" ]; then
	    die "no public key defined in \$JC_GPGPUBKEY"
	fi
	gpgcommand=(gpg --encrypt --recipient "$JC_GPGPUBKEY" "$archive" "&&" rm -v "$archive")
    fi
fi

# Detects if --use-pigz was passed with a format that isn't tgz
if [[ ! $format =~ t(ar\.)?gz$ && -n "$pigzcompressor" ]]; then
    echo "$BASENAME: --use-pigz is not supported by $format files" >&2
fi

# Detects if --use-pbzip2 was passed with a format that isn't tgz
if [[ ! $format =~ t(ar\.)?bz2$ && -v COMPRESSOR2 ]]; then
    echo "$BASENAME: --use-pbzip2 is not supported by $format files" >&2
fi

# Which format?
case "$format" in
    zip)
	temp=$password
	password=$(subflag temp --encrypt)

	movefiles=$(subflag movefiles --move)
	verboseOpt=$(subflag verbose -v)

	cmdline=(zip -T "$verboseOpt" "$movefiles" "$password" "$recursive" "$archive" "$@")
	;;
    7z)
	cmdprefix=7zr

	# passwords are given on the commandline with 7z
	temp=$password
	password=
	if bool "$temp"; then
	    cmdprefix=7za
	    password="-p"$(_getpassword || die "invalid password, $password")
	fi

	movefiles=$(subflag movefiles -sdel)

	cmdline=("$cmdprefix" a "$movefiles" "$password" "$archive" "$@")
	;;
    tgz|tar.gz)
	test -z "$pigzcompressor" && z=z
	verboseOpt=$(subflag verbose v)

	cmdline=(tar "-c${verboseOpt/ /}$z" "$movefiles" "$pigzcompressor" -f "$archive" "$@")
	;;
    tbz2|tar.bz2)
	test -z "$pbzip2compressor" && j=j
	verboseOpt=$(subflag verbose v)

	cmdline=(tar "-c${verboseOpt/ /}$j" "$movefiles" "$pbzip2compressor" -f "$archive" "$@")
	;;
    t7z|tar.7z)
	if bool "$movefiles"; then
	    special7z_deletesources=1
	    unset movefiles
	fi
	verboseTar=$(subflag verbose v)
	verbose7z=$(subflag verbose -bb3)
	cmdline=(tar "-c${verboseTar}f" - "$@" "|" 7za a "$verbose7z" -si "$archive")
	;;
    *)
	die "$formaterror\n\n$USAGE"
esac

if bool $dryrun; then
    concat "${cmdline[@]}"
    if [ -v gpgcommand ]; then
	echo "${gpgcommand[@]}"
    fi
else
    cmdstr=$(concat "${cmdline[@]}")
    eval "$cmdstr" || die "failed to run command: \$ ${cmdline[*]}" 2

    if [ -v gpgcommand ]; then
	cmdstr=$(concat "${gpgcommand[@]}")
	eval "$cmdstr" || die "failed to run command: \$ ${gpgcommand[*]}" 2
    fi

    # Special: tar.7z archives
    # Delete source file(s) after successful creation of archive
    if bool ${special7z_deletesources:-0}; then
	echo
	rm -rfv "$@"
    fi
fi

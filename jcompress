#!/bin/bash

shopt -s expand_aliases

_getpassword() {
    local pswd copy

    echo -e "\nEnter the new password" >&2
    pswd=$(systemd-ask-password)

    if [ -z "$pswd" ]; then
	echo "empty password" >&2
	return 1
    fi

    echo -e "\nConfirm password" >&2
    copy=$(systemd-ask-password)
    echo >&2

    if [ "$pswd" != "$copy" ]; then
	echo "failed to confirm password" >&2
	return 1
    fi

    echo "$pswd"
    true
}

declare -r BASENAME=${0##*/}
declare -r VERSION="$BASENAME [VERSION]"

declare -r USAGE=$(cat <<EOF
usage: $BASENAME [OPTIONS] [-m|--mode MODE] [--] ARCHIVE FILE|DIR...
       $BASENAME -h|--help

Valid Modes:
       zip
       7z
       tgz
       tbz2
       t7z

Valid Extensions:
       zip (.zip)
       7z (.7z)
       tgz (.tgz, .tar.gz)
       tbz2 (.tbz2, .tar.bz2)
       t7z (.t7z, .tar.7z)

Options:
       -h
       --help Display this help message and exit.

       -V
       --version
	     Print the program version and exit.

       -m mode
       --mode Specifiy the mode (or format) of the archive. If
              omitted, the archive's extension is used.

       --use-pigz
              For the tgz format, this specifies pigz as the
              compression program to use.

       --password
              Encrypt the archive with a password. What happens
              exactly will depend on the format.

       -r
       --recursive
              Travel subdirectories recursively.


Environment Variables:
       JC_GPGPUBKEY
              For formats that use gpg to encrypt the file, this
              holds the public key to use.
              Current value: $JC_GPGPUBKEY
EOF
	)

alias usage='echo; echo "$USAGE" | head -n 2 >&2'

# Option defaults
password=0
debug=

# Get option list
if ! temp=$(getopt -n $BASENAME -o 'hrVMm:' -l 'mode:,move,help,use-pigz,recursive,password,debug,version' -- "$@"); then
    usage
    exit 1
fi
eval set -- "$temp"

while true; do
    case "$1" in
	-m|--mode)
	    mode="$2"
	    modeerror="invalid mode: $mode"
	    shift 2
	    ;;
	-h|--help)
	    echo "$USAGE"
	    exit
	    ;;
	-V|--version)
	    echo $VERSION
	    exit
	    ;;
	--use-pigz)
	    COMPRESSOR='--use-compress-program=pigz'
	    shift
	    ;;
	-r|--recursive)
	    recursive='-r'
	    shift
	    ;;
	--password)
	    password=1
	    shift
	    ;;
	--debug)
	    debug=1
	    shift
	    ;;
	-M|--move)
	    movefiles=1
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    echo "$BASENAME: internal error" >&2
	    usage
	    exit 1
	    ;;
    esac
done

# Posititional parameters
case $# in
    0)
	echo -e "missing filename" >&2
	usage
	exit 1
	;;
    1)
	echo -e "no files to insert" >&2
	usage
	exit 1
	;;
    *)

esac

archive="$1"
shift

# If MODE is not specified, use the archive name
if [ -z "$mode" ]; then
    mode="${archive#*.}"
    modeerror="invalid or missing extension: $mode"
elif [ -z "${archive#*.}" ]; then
    temp="${archive%%.*}"
    archive="$temp.$mode"
fi

# Password mode for certain compressed tar archives
if [[ $mode =~ t(ar\.)?[gb]z$ ]]; then
    if [ $password -ne 0 ]; then
	if [ -z "$JC_GPGPUBKEY" ]; then
	    echo "$BASENAME: no public key defined in \$JC_GPGPUBKEY" >&2
	    exit 1
	fi
	gpgcommand=(gpg --encrypt --recipient $JC_GPGPUBKEY "$archive" "&&" rm -v "$archive")
    fi
fi

# Detects if --use-pigz was passed with a format that isn't tgz
if [[ ! $mode =~ t(ar\.)?gz$ && -v COMPRESSOR ]]; then
    echo "$BASENAME: --use-pigz is not supported by $mode files" >&2
fi

# Which mode?
case "$mode" in
    zip)
	temp=$password
	password=
	if [ $temp -ne 0 ]; then
	    password=--encrypt
	fi
	if [ ${movefiles:-0} ]; then
	    movefiles='--move'
	fi
	cmdline=(zip -T $movefiles $password $recursive "$archive" "$@")
	;;
    7z)
	cmdprefix=7zr
	
	# passwords are given on the commandline with 7z
	temp=$password
	password=
	if [ $temp -ne 0 ]; then
	    cmdprefix=7za
	    password="-p"$(_getpassword)
	    [ $? -eq 0 ] || exit 1
	fi
	test ${movefiles:-0} && movefiles='-sdel'
	cmdline=($cmdprefix a $movefiles $password "$archive" "$@")
	;;
    tgz|tar.gz)
	test ${movefiles:-0} && movefiles='--remove-files'

	if [ -n "$COMPRESSOR" ]; then
	    cmdline=(tar -c $movefiles $COMPRESSOR -f "$archive" "$@")
	else
	    cmdline=(tar -cz $movefiles -f "$archive" "$@")
	fi
	;;
    tbz2|tar.bz2)
	test ${movefiles:-0} && movefiles='--remove-files'
	cmdline=(tar -cj $movefiles -f "$archive" "$@")
	;;
    t7z|tar.7z)
	if bool ${movefiles:-0}; then
	    special7z_deletesources=1
	    unset movefiles
	fi
	cmdline=(tar -cf - "$@" "|" 7za a -si "$archive")
	;;
    *)
	echo -e "$modeerror\n\n$USAGE" >&2
	exit 1
esac

if [ ${debug:-0} -ne 0 ]; then
    echo "${cmdline[@]}"
    if [ -v gpgcommand ]; then
	echo "${gpgcommand[@]}"
    fi
else
    eval "${cmdline[@]}"
    if [ -v gpgcommand ]; then
	eval "${gpgcommand[@]}"
    fi
    # Special: tar.7z archives
    # Delete source file(s) after successful creation of archive
    echo "-- ${special7z_deletesources:-0}"
    if bool ${special7z_deletesources:-0}; then
	echo
	rm -rfv "$@"
    fi
fi
